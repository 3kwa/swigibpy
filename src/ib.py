# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ib', [dirname(__file__)])
        except ImportError:
            import _ib
            return _ib
        if fp is not None:
            try:
                _mod = imp.load_module('_ib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ib = swig_import_helper()
    del swig_import_helper
else:
    import _ib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class EClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EClient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ib.delete_EClient
    __del__ = lambda self : None;
    def eConnect(self, *args): return _ib.EClient_eConnect(self, *args)
    def eDisconnect(self): return _ib.EClient_eDisconnect(self)
    def serverVersion(self): return _ib.EClient_serverVersion(self)
    def TwsConnectionTime(self): return _ib.EClient_TwsConnectionTime(self)
    def reqMktData(self, *args): return _ib.EClient_reqMktData(self, *args)
    def cancelMktData(self, *args): return _ib.EClient_cancelMktData(self, *args)
    def placeOrder(self, *args): return _ib.EClient_placeOrder(self, *args)
    def cancelOrder(self, *args): return _ib.EClient_cancelOrder(self, *args)
    def reqOpenOrders(self): return _ib.EClient_reqOpenOrders(self)
    def reqAccountUpdates(self, *args): return _ib.EClient_reqAccountUpdates(self, *args)
    def reqExecutions(self, *args): return _ib.EClient_reqExecutions(self, *args)
    def reqIds(self, *args): return _ib.EClient_reqIds(self, *args)
    def checkMessages(self): return _ib.EClient_checkMessages(self)
    def reqContractDetails(self, *args): return _ib.EClient_reqContractDetails(self, *args)
    def reqMktDepth(self, *args): return _ib.EClient_reqMktDepth(self, *args)
    def cancelMktDepth(self, *args): return _ib.EClient_cancelMktDepth(self, *args)
    def reqNewsBulletins(self, *args): return _ib.EClient_reqNewsBulletins(self, *args)
    def cancelNewsBulletins(self): return _ib.EClient_cancelNewsBulletins(self)
    def setServerLogLevel(self, *args): return _ib.EClient_setServerLogLevel(self, *args)
    def reqAutoOpenOrders(self, *args): return _ib.EClient_reqAutoOpenOrders(self, *args)
    def reqAllOpenOrders(self): return _ib.EClient_reqAllOpenOrders(self)
    def reqManagedAccts(self): return _ib.EClient_reqManagedAccts(self)
    def requestFA(self, *args): return _ib.EClient_requestFA(self, *args)
    def replaceFA(self, *args): return _ib.EClient_replaceFA(self, *args)
    def reqHistoricalData(self, *args): return _ib.EClient_reqHistoricalData(self, *args)
    def exerciseOptions(self, *args): return _ib.EClient_exerciseOptions(self, *args)
    def cancelHistoricalData(self, *args): return _ib.EClient_cancelHistoricalData(self, *args)
    def reqRealTimeBars(self, *args): return _ib.EClient_reqRealTimeBars(self, *args)
    def cancelRealTimeBars(self, *args): return _ib.EClient_cancelRealTimeBars(self, *args)
    def cancelScannerSubscription(self, *args): return _ib.EClient_cancelScannerSubscription(self, *args)
    def reqScannerParameters(self): return _ib.EClient_reqScannerParameters(self)
    def reqScannerSubscription(self, *args): return _ib.EClient_reqScannerSubscription(self, *args)
    def reqCurrentTime(self): return _ib.EClient_reqCurrentTime(self)
    def reqFundamentalData(self, *args): return _ib.EClient_reqFundamentalData(self, *args)
    def cancelFundamentalData(self, *args): return _ib.EClient_cancelFundamentalData(self, *args)
    def calculateImpliedVolatility(self, *args): return _ib.EClient_calculateImpliedVolatility(self, *args)
    def calculateOptionPrice(self, *args): return _ib.EClient_calculateOptionPrice(self, *args)
    def cancelCalculateImpliedVolatility(self, *args): return _ib.EClient_cancelCalculateImpliedVolatility(self, *args)
    def cancelCalculateOptionPrice(self, *args): return _ib.EClient_cancelCalculateOptionPrice(self, *args)
EClient_swigregister = _ib.EClient_swigregister
EClient_swigregister(EClient)

class EClientSocketBase(EClient):
    __swig_setmethods__ = {}
    for _s in [EClient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EClientSocketBase, name, value)
    __swig_getmethods__ = {}
    for _s in [EClient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EClientSocketBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ib.delete_EClientSocketBase
    __del__ = lambda self : None;
    def eConnect(self, *args): return _ib.EClientSocketBase_eConnect(self, *args)
    def eDisconnect(self): return _ib.EClientSocketBase_eDisconnect(self)
    def isConnected(self): return _ib.EClientSocketBase_isConnected(self)
    def isInBufferEmpty(self): return _ib.EClientSocketBase_isInBufferEmpty(self)
    def isOutBufferEmpty(self): return _ib.EClientSocketBase_isOutBufferEmpty(self)
    def serverVersion(self): return _ib.EClientSocketBase_serverVersion(self)
    def TwsConnectionTime(self): return _ib.EClientSocketBase_TwsConnectionTime(self)
    def reqMktData(self, *args): return _ib.EClientSocketBase_reqMktData(self, *args)
    def cancelMktData(self, *args): return _ib.EClientSocketBase_cancelMktData(self, *args)
    def placeOrder(self, *args): return _ib.EClientSocketBase_placeOrder(self, *args)
    def cancelOrder(self, *args): return _ib.EClientSocketBase_cancelOrder(self, *args)
    def reqOpenOrders(self): return _ib.EClientSocketBase_reqOpenOrders(self)
    def reqAccountUpdates(self, *args): return _ib.EClientSocketBase_reqAccountUpdates(self, *args)
    def reqExecutions(self, *args): return _ib.EClientSocketBase_reqExecutions(self, *args)
    def reqIds(self, *args): return _ib.EClientSocketBase_reqIds(self, *args)
    def checkMessages(self): return _ib.EClientSocketBase_checkMessages(self)
    def reqContractDetails(self, *args): return _ib.EClientSocketBase_reqContractDetails(self, *args)
    def reqMktDepth(self, *args): return _ib.EClientSocketBase_reqMktDepth(self, *args)
    def cancelMktDepth(self, *args): return _ib.EClientSocketBase_cancelMktDepth(self, *args)
    def reqNewsBulletins(self, *args): return _ib.EClientSocketBase_reqNewsBulletins(self, *args)
    def cancelNewsBulletins(self): return _ib.EClientSocketBase_cancelNewsBulletins(self)
    def setServerLogLevel(self, *args): return _ib.EClientSocketBase_setServerLogLevel(self, *args)
    def reqAutoOpenOrders(self, *args): return _ib.EClientSocketBase_reqAutoOpenOrders(self, *args)
    def reqAllOpenOrders(self): return _ib.EClientSocketBase_reqAllOpenOrders(self)
    def reqManagedAccts(self): return _ib.EClientSocketBase_reqManagedAccts(self)
    def requestFA(self, *args): return _ib.EClientSocketBase_requestFA(self, *args)
    def replaceFA(self, *args): return _ib.EClientSocketBase_replaceFA(self, *args)
    def reqHistoricalData(self, *args): return _ib.EClientSocketBase_reqHistoricalData(self, *args)
    def exerciseOptions(self, *args): return _ib.EClientSocketBase_exerciseOptions(self, *args)
    def cancelHistoricalData(self, *args): return _ib.EClientSocketBase_cancelHistoricalData(self, *args)
    def reqRealTimeBars(self, *args): return _ib.EClientSocketBase_reqRealTimeBars(self, *args)
    def cancelRealTimeBars(self, *args): return _ib.EClientSocketBase_cancelRealTimeBars(self, *args)
    def cancelScannerSubscription(self, *args): return _ib.EClientSocketBase_cancelScannerSubscription(self, *args)
    def reqScannerParameters(self): return _ib.EClientSocketBase_reqScannerParameters(self)
    def reqScannerSubscription(self, *args): return _ib.EClientSocketBase_reqScannerSubscription(self, *args)
    def reqCurrentTime(self): return _ib.EClientSocketBase_reqCurrentTime(self)
    def reqFundamentalData(self, *args): return _ib.EClientSocketBase_reqFundamentalData(self, *args)
    def cancelFundamentalData(self, *args): return _ib.EClientSocketBase_cancelFundamentalData(self, *args)
    def calculateImpliedVolatility(self, *args): return _ib.EClientSocketBase_calculateImpliedVolatility(self, *args)
    def calculateOptionPrice(self, *args): return _ib.EClientSocketBase_calculateOptionPrice(self, *args)
    def cancelCalculateImpliedVolatility(self, *args): return _ib.EClientSocketBase_cancelCalculateImpliedVolatility(self, *args)
    def cancelCalculateOptionPrice(self, *args): return _ib.EClientSocketBase_cancelCalculateOptionPrice(self, *args)
EClientSocketBase_swigregister = _ib.EClientSocketBase_swigregister
EClientSocketBase_swigregister(EClientSocketBase)

class EPosixClientSocket(EClientSocketBase):
    __swig_setmethods__ = {}
    for _s in [EClientSocketBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EPosixClientSocket, name, value)
    __swig_getmethods__ = {}
    for _s in [EClientSocketBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EPosixClientSocket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ib.new_EPosixClientSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ib.delete_EPosixClientSocket
    __del__ = lambda self : None;
    def eConnect(self, *args): return _ib.EPosixClientSocket_eConnect(self, *args)
    def eDisconnect(self): return _ib.EPosixClientSocket_eDisconnect(self)
    def isSocketOK(self): return _ib.EPosixClientSocket_isSocketOK(self)
    def fd(self): return _ib.EPosixClientSocket_fd(self)
    def onReceive(self): return _ib.EPosixClientSocket_onReceive(self)
    def onSend(self): return _ib.EPosixClientSocket_onSend(self)
    def onError(self): return _ib.EPosixClientSocket_onError(self)
    def handleSocketError(self): return _ib.EPosixClientSocket_handleSocketError(self)
EPosixClientSocket_swigregister = _ib.EPosixClientSocket_swigregister
EPosixClientSocket_swigregister(EPosixClientSocket)

BID_SIZE = _ib.BID_SIZE
BID = _ib.BID
ASK = _ib.ASK
ASK_SIZE = _ib.ASK_SIZE
LAST = _ib.LAST
LAST_SIZE = _ib.LAST_SIZE
HIGH = _ib.HIGH
LOW = _ib.LOW
VOLUME = _ib.VOLUME
CLOSE = _ib.CLOSE
BID_OPTION_COMPUTATION = _ib.BID_OPTION_COMPUTATION
ASK_OPTION_COMPUTATION = _ib.ASK_OPTION_COMPUTATION
LAST_OPTION_COMPUTATION = _ib.LAST_OPTION_COMPUTATION
MODEL_OPTION = _ib.MODEL_OPTION
OPEN = _ib.OPEN
LOW_13_WEEK = _ib.LOW_13_WEEK
HIGH_13_WEEK = _ib.HIGH_13_WEEK
LOW_26_WEEK = _ib.LOW_26_WEEK
HIGH_26_WEEK = _ib.HIGH_26_WEEK
LOW_52_WEEK = _ib.LOW_52_WEEK
HIGH_52_WEEK = _ib.HIGH_52_WEEK
AVG_VOLUME = _ib.AVG_VOLUME
OPEN_INTEREST = _ib.OPEN_INTEREST
OPTION_HISTORICAL_VOL = _ib.OPTION_HISTORICAL_VOL
OPTION_IMPLIED_VOL = _ib.OPTION_IMPLIED_VOL
OPTION_BID_EXCH = _ib.OPTION_BID_EXCH
OPTION_ASK_EXCH = _ib.OPTION_ASK_EXCH
OPTION_CALL_OPEN_INTEREST = _ib.OPTION_CALL_OPEN_INTEREST
OPTION_PUT_OPEN_INTEREST = _ib.OPTION_PUT_OPEN_INTEREST
OPTION_CALL_VOLUME = _ib.OPTION_CALL_VOLUME
OPTION_PUT_VOLUME = _ib.OPTION_PUT_VOLUME
INDEX_FUTURE_PREMIUM = _ib.INDEX_FUTURE_PREMIUM
BID_EXCH = _ib.BID_EXCH
ASK_EXCH = _ib.ASK_EXCH
AUCTION_VOLUME = _ib.AUCTION_VOLUME
AUCTION_PRICE = _ib.AUCTION_PRICE
AUCTION_IMBALANCE = _ib.AUCTION_IMBALANCE
MARK_PRICE = _ib.MARK_PRICE
BID_EFP_COMPUTATION = _ib.BID_EFP_COMPUTATION
ASK_EFP_COMPUTATION = _ib.ASK_EFP_COMPUTATION
LAST_EFP_COMPUTATION = _ib.LAST_EFP_COMPUTATION
OPEN_EFP_COMPUTATION = _ib.OPEN_EFP_COMPUTATION
HIGH_EFP_COMPUTATION = _ib.HIGH_EFP_COMPUTATION
LOW_EFP_COMPUTATION = _ib.LOW_EFP_COMPUTATION
CLOSE_EFP_COMPUTATION = _ib.CLOSE_EFP_COMPUTATION
LAST_TIMESTAMP = _ib.LAST_TIMESTAMP
SHORTABLE = _ib.SHORTABLE
FUNDAMENTAL_RATIOS = _ib.FUNDAMENTAL_RATIOS
RT_VOLUME = _ib.RT_VOLUME
HALTED = _ib.HALTED
BID_YIELD = _ib.BID_YIELD
ASK_YIELD = _ib.ASK_YIELD
LAST_YIELD = _ib.LAST_YIELD
CUST_OPTION_COMPUTATION = _ib.CUST_OPTION_COMPUTATION
NOT_SET = _ib.NOT_SET

def isPrice(*args):
  return _ib.isPrice(*args)
isPrice = _ib.isPrice
class EWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EWrapper, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ib.delete_EWrapper
    __del__ = lambda self : None;
    def tickPrice(self, *args): return _ib.EWrapper_tickPrice(self, *args)
    def tickSize(self, *args): return _ib.EWrapper_tickSize(self, *args)
    def tickOptionComputation(self, *args): return _ib.EWrapper_tickOptionComputation(self, *args)
    def tickGeneric(self, *args): return _ib.EWrapper_tickGeneric(self, *args)
    def tickString(self, *args): return _ib.EWrapper_tickString(self, *args)
    def tickEFP(self, *args): return _ib.EWrapper_tickEFP(self, *args)
    def orderStatus(self, *args): return _ib.EWrapper_orderStatus(self, *args)
    def openOrder(self, *args): return _ib.EWrapper_openOrder(self, *args)
    def openOrderEnd(self): return _ib.EWrapper_openOrderEnd(self)
    def winError(self, *args): return _ib.EWrapper_winError(self, *args)
    def connectionClosed(self): return _ib.EWrapper_connectionClosed(self)
    def updateAccountValue(self, *args): return _ib.EWrapper_updateAccountValue(self, *args)
    def updatePortfolio(self, *args): return _ib.EWrapper_updatePortfolio(self, *args)
    def updateAccountTime(self, *args): return _ib.EWrapper_updateAccountTime(self, *args)
    def accountDownloadEnd(self, *args): return _ib.EWrapper_accountDownloadEnd(self, *args)
    def nextValidId(self, *args): return _ib.EWrapper_nextValidId(self, *args)
    def contractDetails(self, *args): return _ib.EWrapper_contractDetails(self, *args)
    def bondContractDetails(self, *args): return _ib.EWrapper_bondContractDetails(self, *args)
    def contractDetailsEnd(self, *args): return _ib.EWrapper_contractDetailsEnd(self, *args)
    def execDetails(self, *args): return _ib.EWrapper_execDetails(self, *args)
    def execDetailsEnd(self, *args): return _ib.EWrapper_execDetailsEnd(self, *args)
    def error(self, *args): return _ib.EWrapper_error(self, *args)
    def updateMktDepth(self, *args): return _ib.EWrapper_updateMktDepth(self, *args)
    def updateMktDepthL2(self, *args): return _ib.EWrapper_updateMktDepthL2(self, *args)
    def updateNewsBulletin(self, *args): return _ib.EWrapper_updateNewsBulletin(self, *args)
    def managedAccounts(self, *args): return _ib.EWrapper_managedAccounts(self, *args)
    def receiveFA(self, *args): return _ib.EWrapper_receiveFA(self, *args)
    def historicalData(self, *args): return _ib.EWrapper_historicalData(self, *args)
    def scannerParameters(self, *args): return _ib.EWrapper_scannerParameters(self, *args)
    def scannerData(self, *args): return _ib.EWrapper_scannerData(self, *args)
    def scannerDataEnd(self, *args): return _ib.EWrapper_scannerDataEnd(self, *args)
    def realtimeBar(self, *args): return _ib.EWrapper_realtimeBar(self, *args)
    def currentTime(self, *args): return _ib.EWrapper_currentTime(self, *args)
    def fundamentalData(self, *args): return _ib.EWrapper_fundamentalData(self, *args)
    def deltaNeutralValidation(self, *args): return _ib.EWrapper_deltaNeutralValidation(self, *args)
    def tickSnapshotEnd(self, *args): return _ib.EWrapper_tickSnapshotEnd(self, *args)
    def __init__(self): 
        if self.__class__ == EWrapper:
            _self = None
        else:
            _self = self
        this = _ib.new_EWrapper(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _ib.disown_EWrapper(self)
        return weakref_proxy(self)
EWrapper_swigregister = _ib.EWrapper_swigregister
EWrapper_swigregister(EWrapper)

SAME_POS = _ib.SAME_POS
OPEN_POS = _ib.OPEN_POS
CLOSE_POS = _ib.CLOSE_POS
UNKNOWN_POS = _ib.UNKNOWN_POS
class ComboLeg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComboLeg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComboLeg, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ib.new_ComboLeg()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["conId"] = _ib.ComboLeg_conId_set
    __swig_getmethods__["conId"] = _ib.ComboLeg_conId_get
    if _newclass:conId = _swig_property(_ib.ComboLeg_conId_get, _ib.ComboLeg_conId_set)
    __swig_setmethods__["ratio"] = _ib.ComboLeg_ratio_set
    __swig_getmethods__["ratio"] = _ib.ComboLeg_ratio_get
    if _newclass:ratio = _swig_property(_ib.ComboLeg_ratio_get, _ib.ComboLeg_ratio_set)
    __swig_setmethods__["action"] = _ib.ComboLeg_action_set
    __swig_getmethods__["action"] = _ib.ComboLeg_action_get
    if _newclass:action = _swig_property(_ib.ComboLeg_action_get, _ib.ComboLeg_action_set)
    __swig_setmethods__["exchange"] = _ib.ComboLeg_exchange_set
    __swig_getmethods__["exchange"] = _ib.ComboLeg_exchange_get
    if _newclass:exchange = _swig_property(_ib.ComboLeg_exchange_get, _ib.ComboLeg_exchange_set)
    __swig_setmethods__["openClose"] = _ib.ComboLeg_openClose_set
    __swig_getmethods__["openClose"] = _ib.ComboLeg_openClose_get
    if _newclass:openClose = _swig_property(_ib.ComboLeg_openClose_get, _ib.ComboLeg_openClose_set)
    __swig_setmethods__["shortSaleSlot"] = _ib.ComboLeg_shortSaleSlot_set
    __swig_getmethods__["shortSaleSlot"] = _ib.ComboLeg_shortSaleSlot_get
    if _newclass:shortSaleSlot = _swig_property(_ib.ComboLeg_shortSaleSlot_get, _ib.ComboLeg_shortSaleSlot_set)
    __swig_setmethods__["designatedLocation"] = _ib.ComboLeg_designatedLocation_set
    __swig_getmethods__["designatedLocation"] = _ib.ComboLeg_designatedLocation_get
    if _newclass:designatedLocation = _swig_property(_ib.ComboLeg_designatedLocation_get, _ib.ComboLeg_designatedLocation_set)
    def __eq__(self, *args): return _ib.ComboLeg___eq__(self, *args)
    __swig_destroy__ = _ib.delete_ComboLeg
    __del__ = lambda self : None;
ComboLeg_swigregister = _ib.ComboLeg_swigregister
ComboLeg_swigregister(ComboLeg)

class UnderComp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnderComp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ib.new_UnderComp()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["conId"] = _ib.UnderComp_conId_set
    __swig_getmethods__["conId"] = _ib.UnderComp_conId_get
    if _newclass:conId = _swig_property(_ib.UnderComp_conId_get, _ib.UnderComp_conId_set)
    __swig_setmethods__["delta"] = _ib.UnderComp_delta_set
    __swig_getmethods__["delta"] = _ib.UnderComp_delta_get
    if _newclass:delta = _swig_property(_ib.UnderComp_delta_get, _ib.UnderComp_delta_set)
    __swig_setmethods__["price"] = _ib.UnderComp_price_set
    __swig_getmethods__["price"] = _ib.UnderComp_price_get
    if _newclass:price = _swig_property(_ib.UnderComp_price_get, _ib.UnderComp_price_set)
    __swig_destroy__ = _ib.delete_UnderComp
    __del__ = lambda self : None;
UnderComp_swigregister = _ib.UnderComp_swigregister
UnderComp_swigregister(UnderComp)

class Contract(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contract, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contract, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ib.new_Contract()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["conId"] = _ib.Contract_conId_set
    __swig_getmethods__["conId"] = _ib.Contract_conId_get
    if _newclass:conId = _swig_property(_ib.Contract_conId_get, _ib.Contract_conId_set)
    __swig_setmethods__["symbol"] = _ib.Contract_symbol_set
    __swig_getmethods__["symbol"] = _ib.Contract_symbol_get
    if _newclass:symbol = _swig_property(_ib.Contract_symbol_get, _ib.Contract_symbol_set)
    __swig_setmethods__["secType"] = _ib.Contract_secType_set
    __swig_getmethods__["secType"] = _ib.Contract_secType_get
    if _newclass:secType = _swig_property(_ib.Contract_secType_get, _ib.Contract_secType_set)
    __swig_setmethods__["expiry"] = _ib.Contract_expiry_set
    __swig_getmethods__["expiry"] = _ib.Contract_expiry_get
    if _newclass:expiry = _swig_property(_ib.Contract_expiry_get, _ib.Contract_expiry_set)
    __swig_setmethods__["strike"] = _ib.Contract_strike_set
    __swig_getmethods__["strike"] = _ib.Contract_strike_get
    if _newclass:strike = _swig_property(_ib.Contract_strike_get, _ib.Contract_strike_set)
    __swig_setmethods__["right"] = _ib.Contract_right_set
    __swig_getmethods__["right"] = _ib.Contract_right_get
    if _newclass:right = _swig_property(_ib.Contract_right_get, _ib.Contract_right_set)
    __swig_setmethods__["multiplier"] = _ib.Contract_multiplier_set
    __swig_getmethods__["multiplier"] = _ib.Contract_multiplier_get
    if _newclass:multiplier = _swig_property(_ib.Contract_multiplier_get, _ib.Contract_multiplier_set)
    __swig_setmethods__["exchange"] = _ib.Contract_exchange_set
    __swig_getmethods__["exchange"] = _ib.Contract_exchange_get
    if _newclass:exchange = _swig_property(_ib.Contract_exchange_get, _ib.Contract_exchange_set)
    __swig_setmethods__["primaryExchange"] = _ib.Contract_primaryExchange_set
    __swig_getmethods__["primaryExchange"] = _ib.Contract_primaryExchange_get
    if _newclass:primaryExchange = _swig_property(_ib.Contract_primaryExchange_get, _ib.Contract_primaryExchange_set)
    __swig_setmethods__["currency"] = _ib.Contract_currency_set
    __swig_getmethods__["currency"] = _ib.Contract_currency_get
    if _newclass:currency = _swig_property(_ib.Contract_currency_get, _ib.Contract_currency_set)
    __swig_setmethods__["localSymbol"] = _ib.Contract_localSymbol_set
    __swig_getmethods__["localSymbol"] = _ib.Contract_localSymbol_get
    if _newclass:localSymbol = _swig_property(_ib.Contract_localSymbol_get, _ib.Contract_localSymbol_set)
    __swig_setmethods__["includeExpired"] = _ib.Contract_includeExpired_set
    __swig_getmethods__["includeExpired"] = _ib.Contract_includeExpired_get
    if _newclass:includeExpired = _swig_property(_ib.Contract_includeExpired_get, _ib.Contract_includeExpired_set)
    __swig_setmethods__["secIdType"] = _ib.Contract_secIdType_set
    __swig_getmethods__["secIdType"] = _ib.Contract_secIdType_get
    if _newclass:secIdType = _swig_property(_ib.Contract_secIdType_get, _ib.Contract_secIdType_set)
    __swig_setmethods__["secId"] = _ib.Contract_secId_set
    __swig_getmethods__["secId"] = _ib.Contract_secId_get
    if _newclass:secId = _swig_property(_ib.Contract_secId_get, _ib.Contract_secId_set)
    __swig_setmethods__["comboLegsDescrip"] = _ib.Contract_comboLegsDescrip_set
    __swig_getmethods__["comboLegsDescrip"] = _ib.Contract_comboLegsDescrip_get
    if _newclass:comboLegsDescrip = _swig_property(_ib.Contract_comboLegsDescrip_get, _ib.Contract_comboLegsDescrip_set)
    __swig_setmethods__["comboLegs"] = _ib.Contract_comboLegs_set
    __swig_getmethods__["comboLegs"] = _ib.Contract_comboLegs_get
    if _newclass:comboLegs = _swig_property(_ib.Contract_comboLegs_get, _ib.Contract_comboLegs_set)
    __swig_setmethods__["underComp"] = _ib.Contract_underComp_set
    __swig_getmethods__["underComp"] = _ib.Contract_underComp_get
    if _newclass:underComp = _swig_property(_ib.Contract_underComp_get, _ib.Contract_underComp_set)
    __swig_getmethods__["CloneComboLegs"] = lambda x: _ib.Contract_CloneComboLegs
    if _newclass:CloneComboLegs = staticmethod(_ib.Contract_CloneComboLegs)
    __swig_getmethods__["CleanupComboLegs"] = lambda x: _ib.Contract_CleanupComboLegs
    if _newclass:CleanupComboLegs = staticmethod(_ib.Contract_CleanupComboLegs)
    __swig_destroy__ = _ib.delete_Contract
    __del__ = lambda self : None;
Contract_swigregister = _ib.Contract_swigregister
Contract_swigregister(Contract)

def Contract_CloneComboLegs(*args):
  return _ib.Contract_CloneComboLegs(*args)
Contract_CloneComboLegs = _ib.Contract_CloneComboLegs

def Contract_CleanupComboLegs(*args):
  return _ib.Contract_CleanupComboLegs(*args)
Contract_CleanupComboLegs = _ib.Contract_CleanupComboLegs

class ContractDetails(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContractDetails, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContractDetails, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ib.new_ContractDetails()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["summary"] = _ib.ContractDetails_summary_set
    __swig_getmethods__["summary"] = _ib.ContractDetails_summary_get
    if _newclass:summary = _swig_property(_ib.ContractDetails_summary_get, _ib.ContractDetails_summary_set)
    __swig_setmethods__["marketName"] = _ib.ContractDetails_marketName_set
    __swig_getmethods__["marketName"] = _ib.ContractDetails_marketName_get
    if _newclass:marketName = _swig_property(_ib.ContractDetails_marketName_get, _ib.ContractDetails_marketName_set)
    __swig_setmethods__["tradingClass"] = _ib.ContractDetails_tradingClass_set
    __swig_getmethods__["tradingClass"] = _ib.ContractDetails_tradingClass_get
    if _newclass:tradingClass = _swig_property(_ib.ContractDetails_tradingClass_get, _ib.ContractDetails_tradingClass_set)
    __swig_setmethods__["minTick"] = _ib.ContractDetails_minTick_set
    __swig_getmethods__["minTick"] = _ib.ContractDetails_minTick_get
    if _newclass:minTick = _swig_property(_ib.ContractDetails_minTick_get, _ib.ContractDetails_minTick_set)
    __swig_setmethods__["orderTypes"] = _ib.ContractDetails_orderTypes_set
    __swig_getmethods__["orderTypes"] = _ib.ContractDetails_orderTypes_get
    if _newclass:orderTypes = _swig_property(_ib.ContractDetails_orderTypes_get, _ib.ContractDetails_orderTypes_set)
    __swig_setmethods__["validExchanges"] = _ib.ContractDetails_validExchanges_set
    __swig_getmethods__["validExchanges"] = _ib.ContractDetails_validExchanges_get
    if _newclass:validExchanges = _swig_property(_ib.ContractDetails_validExchanges_get, _ib.ContractDetails_validExchanges_set)
    __swig_setmethods__["priceMagnifier"] = _ib.ContractDetails_priceMagnifier_set
    __swig_getmethods__["priceMagnifier"] = _ib.ContractDetails_priceMagnifier_get
    if _newclass:priceMagnifier = _swig_property(_ib.ContractDetails_priceMagnifier_get, _ib.ContractDetails_priceMagnifier_set)
    __swig_setmethods__["underConId"] = _ib.ContractDetails_underConId_set
    __swig_getmethods__["underConId"] = _ib.ContractDetails_underConId_get
    if _newclass:underConId = _swig_property(_ib.ContractDetails_underConId_get, _ib.ContractDetails_underConId_set)
    __swig_setmethods__["longName"] = _ib.ContractDetails_longName_set
    __swig_getmethods__["longName"] = _ib.ContractDetails_longName_get
    if _newclass:longName = _swig_property(_ib.ContractDetails_longName_get, _ib.ContractDetails_longName_set)
    __swig_setmethods__["contractMonth"] = _ib.ContractDetails_contractMonth_set
    __swig_getmethods__["contractMonth"] = _ib.ContractDetails_contractMonth_get
    if _newclass:contractMonth = _swig_property(_ib.ContractDetails_contractMonth_get, _ib.ContractDetails_contractMonth_set)
    __swig_setmethods__["industry"] = _ib.ContractDetails_industry_set
    __swig_getmethods__["industry"] = _ib.ContractDetails_industry_get
    if _newclass:industry = _swig_property(_ib.ContractDetails_industry_get, _ib.ContractDetails_industry_set)
    __swig_setmethods__["category"] = _ib.ContractDetails_category_set
    __swig_getmethods__["category"] = _ib.ContractDetails_category_get
    if _newclass:category = _swig_property(_ib.ContractDetails_category_get, _ib.ContractDetails_category_set)
    __swig_setmethods__["subcategory"] = _ib.ContractDetails_subcategory_set
    __swig_getmethods__["subcategory"] = _ib.ContractDetails_subcategory_get
    if _newclass:subcategory = _swig_property(_ib.ContractDetails_subcategory_get, _ib.ContractDetails_subcategory_set)
    __swig_setmethods__["timeZoneId"] = _ib.ContractDetails_timeZoneId_set
    __swig_getmethods__["timeZoneId"] = _ib.ContractDetails_timeZoneId_get
    if _newclass:timeZoneId = _swig_property(_ib.ContractDetails_timeZoneId_get, _ib.ContractDetails_timeZoneId_set)
    __swig_setmethods__["tradingHours"] = _ib.ContractDetails_tradingHours_set
    __swig_getmethods__["tradingHours"] = _ib.ContractDetails_tradingHours_get
    if _newclass:tradingHours = _swig_property(_ib.ContractDetails_tradingHours_get, _ib.ContractDetails_tradingHours_set)
    __swig_setmethods__["liquidHours"] = _ib.ContractDetails_liquidHours_set
    __swig_getmethods__["liquidHours"] = _ib.ContractDetails_liquidHours_get
    if _newclass:liquidHours = _swig_property(_ib.ContractDetails_liquidHours_get, _ib.ContractDetails_liquidHours_set)
    __swig_setmethods__["cusip"] = _ib.ContractDetails_cusip_set
    __swig_getmethods__["cusip"] = _ib.ContractDetails_cusip_get
    if _newclass:cusip = _swig_property(_ib.ContractDetails_cusip_get, _ib.ContractDetails_cusip_set)
    __swig_setmethods__["ratings"] = _ib.ContractDetails_ratings_set
    __swig_getmethods__["ratings"] = _ib.ContractDetails_ratings_get
    if _newclass:ratings = _swig_property(_ib.ContractDetails_ratings_get, _ib.ContractDetails_ratings_set)
    __swig_setmethods__["descAppend"] = _ib.ContractDetails_descAppend_set
    __swig_getmethods__["descAppend"] = _ib.ContractDetails_descAppend_get
    if _newclass:descAppend = _swig_property(_ib.ContractDetails_descAppend_get, _ib.ContractDetails_descAppend_set)
    __swig_setmethods__["bondType"] = _ib.ContractDetails_bondType_set
    __swig_getmethods__["bondType"] = _ib.ContractDetails_bondType_get
    if _newclass:bondType = _swig_property(_ib.ContractDetails_bondType_get, _ib.ContractDetails_bondType_set)
    __swig_setmethods__["couponType"] = _ib.ContractDetails_couponType_set
    __swig_getmethods__["couponType"] = _ib.ContractDetails_couponType_get
    if _newclass:couponType = _swig_property(_ib.ContractDetails_couponType_get, _ib.ContractDetails_couponType_set)
    __swig_setmethods__["callable"] = _ib.ContractDetails_callable_set
    __swig_getmethods__["callable"] = _ib.ContractDetails_callable_get
    if _newclass:callable = _swig_property(_ib.ContractDetails_callable_get, _ib.ContractDetails_callable_set)
    __swig_setmethods__["putable"] = _ib.ContractDetails_putable_set
    __swig_getmethods__["putable"] = _ib.ContractDetails_putable_get
    if _newclass:putable = _swig_property(_ib.ContractDetails_putable_get, _ib.ContractDetails_putable_set)
    __swig_setmethods__["coupon"] = _ib.ContractDetails_coupon_set
    __swig_getmethods__["coupon"] = _ib.ContractDetails_coupon_get
    if _newclass:coupon = _swig_property(_ib.ContractDetails_coupon_get, _ib.ContractDetails_coupon_set)
    __swig_setmethods__["convertible"] = _ib.ContractDetails_convertible_set
    __swig_getmethods__["convertible"] = _ib.ContractDetails_convertible_get
    if _newclass:convertible = _swig_property(_ib.ContractDetails_convertible_get, _ib.ContractDetails_convertible_set)
    __swig_setmethods__["maturity"] = _ib.ContractDetails_maturity_set
    __swig_getmethods__["maturity"] = _ib.ContractDetails_maturity_get
    if _newclass:maturity = _swig_property(_ib.ContractDetails_maturity_get, _ib.ContractDetails_maturity_set)
    __swig_setmethods__["issueDate"] = _ib.ContractDetails_issueDate_set
    __swig_getmethods__["issueDate"] = _ib.ContractDetails_issueDate_get
    if _newclass:issueDate = _swig_property(_ib.ContractDetails_issueDate_get, _ib.ContractDetails_issueDate_set)
    __swig_setmethods__["nextOptionDate"] = _ib.ContractDetails_nextOptionDate_set
    __swig_getmethods__["nextOptionDate"] = _ib.ContractDetails_nextOptionDate_get
    if _newclass:nextOptionDate = _swig_property(_ib.ContractDetails_nextOptionDate_get, _ib.ContractDetails_nextOptionDate_set)
    __swig_setmethods__["nextOptionType"] = _ib.ContractDetails_nextOptionType_set
    __swig_getmethods__["nextOptionType"] = _ib.ContractDetails_nextOptionType_get
    if _newclass:nextOptionType = _swig_property(_ib.ContractDetails_nextOptionType_get, _ib.ContractDetails_nextOptionType_set)
    __swig_setmethods__["nextOptionPartial"] = _ib.ContractDetails_nextOptionPartial_set
    __swig_getmethods__["nextOptionPartial"] = _ib.ContractDetails_nextOptionPartial_get
    if _newclass:nextOptionPartial = _swig_property(_ib.ContractDetails_nextOptionPartial_get, _ib.ContractDetails_nextOptionPartial_set)
    __swig_setmethods__["notes"] = _ib.ContractDetails_notes_set
    __swig_getmethods__["notes"] = _ib.ContractDetails_notes_get
    if _newclass:notes = _swig_property(_ib.ContractDetails_notes_get, _ib.ContractDetails_notes_set)
    __swig_destroy__ = _ib.delete_ContractDetails
    __del__ = lambda self : None;
ContractDetails_swigregister = _ib.ContractDetails_swigregister
ContractDetails_swigregister(ContractDetails)

GROUPS = _ib.GROUPS
PROFILES = _ib.PROFILES
ALIASES = _ib.ALIASES

def faDataTypeStr(*args):
  return _ib.faDataTypeStr(*args)
faDataTypeStr = _ib.faDataTypeStr
# This file is compatible with both classic and new-style classes.


